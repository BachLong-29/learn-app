import { FormFooter, Title, WrappedTitle } from 'utils/styles/general';

import { $FixType } from 'utils/constants';
import Head from 'next/head';
import NegativeButton from 'ui-components/Button/NegativeButton';
import PositiveButton from 'ui-components/Button/PositiveButton';
import StudentForm from '../components/StudentForm';
import { StudentKeyValue } from 'utils/StudentKeyValues';
import SuccessModal from 'ui-components/Modal/SuccessModal';
import { addStudentRedux } from 'redux/actions/student.action';
import errorModal from 'ui-components/Modal/ErrorModal';
import studentApi from 'pages/api/studentService';
import { useCallback } from 'react';
import { useDispatch } from 'react-redux';
import { useRouter } from 'next/router';
import { v4 as uuid } from 'uuid';
import withPage from 'components/withPage';

type CreateProps = {};

const CreateStudent = (props: CreateProps) => {
  const dispatch = useDispatch();
  const router = useRouter();
  const handleSubmit = (data: $FixType) => {
    const id = uuid();
    const createData = {
      id: id,
      [StudentKeyValue.NAME]: data.name,
      [StudentKeyValue.YEAR]: data.year,
      [StudentKeyValue.GENDER]: data.gender,
      [StudentKeyValue.NICK_NAME]: data.nickname,
      [StudentKeyValue.RANK]: data.rank,
      [StudentKeyValue.IMAGES]: data.images,
      [StudentKeyValue.DOB]: data.dob,
      [StudentKeyValue.MAJOR]: data.major,
      [StudentKeyValue.EMAIL]: data.email,
      [StudentKeyValue.PHONE]: data.phone,
      [StudentKeyValue.ADDRESS]: data.address,
      [StudentKeyValue.DESC]: data.desc,
    };
    studentApi
      .createStudent(createData)
      .then(() => {
        dispatch(addStudentRedux(createData));
        SuccessModal({
          onOk: () => {
            router.push('/student');
          },
        });
      })
      .catch((error) => {
        errorModal({});
      });
  };
  const renderAction = useCallback((form: any) => {
    return (
      <FormFooter>
        <NegativeButton
          onClick={() => {
            router.push('/student');
          }}
        >
          Cancel
        </NegativeButton>
        <PositiveButton onClick={() => handleSubmit(form?.values)}>
          Save
        </PositiveButton>
      </FormFooter>
    );
  }, []);
  return (
    <>
      <Head>
        <title>Create New Student</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <StudentForm
        renderAction={renderAction}
        renderHeader={
          <WrappedTitle>
            <Title>Create student</Title>
          </WrappedTitle>
        }
      />
    </>
  );
};
CreateStudent.getInitialProps = async (ctx: any) => {
  return {};
};
export default withPage(CreateStudent);
